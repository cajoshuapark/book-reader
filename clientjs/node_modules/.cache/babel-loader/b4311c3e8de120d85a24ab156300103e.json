{"ast":null,"code":"var _jsxFileName = \"/Users/cajoshuapark/flask/client/src/components/searchResult.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { client } from './components/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchResult() {\n  _s();\n\n  var _pageDetails;\n\n  const [searchResults, setSearchResults] = useState([]);\n  const [error, setError] = useState(false);\n  const location = useLocation();\n  const query = new URLSearchParams(location.search).get(\"book\"); // useQuery will send query to backend through uri link and get the data\n  //   const {  loading, error, data }  = useQuery(gql `\n  //   query test {\n  //     allPages {\n  //       nodes {\n  //         bookId\n  //         pagenum\n  //         content\n  //         nodeId\n  //       }\n  //     }\n  //   }\n  // `);\n  //   if (data) console.log(data);\n  //   if (loading) console.log('Loading...');\n  //   if (error) console.log(`Error! ${error.message}`);\n\n  client.query({\n    query: gql`\n      query test {\n        allPages {\n          nodes {\n            bookId\n            pagenum\n            content\n          }\n        }\n      }\n    `\n  }).then(result => console.log(result)); // body in useEffect will run after page is rendered. \n  // // console.log(query);\n  // useEffect(() => {\n  //   // invalid url will trigger an 404 error\n  //   const { search } = window.location;\n  //   const query = new URLSearchParams(search).get('book');\n  //   fetch(\"/getpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(query)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   )\n  // }, []);\n  // function getNextPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage+1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage + 1);\n  // };\n  // function getPrevPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage-1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage - 1);\n  // }\n\n  console.log(query);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"contents\",\n      children: query.contents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"pagenum-inpage\",\n      children: props.pagenum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"pagenum\",\n      children: [\"page: \", (_pageDetails = pageDetails) === null || _pageDetails === void 0 ? void 0 : _pageDetails.pagenum]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"circleBackButton\",\n      onClick: getPrevPage,\n      children: \"back page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"circleForwardButton\",\n      onClick: getNextPage,\n      children: \"next page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SearchResult, \"RbmLJitpjNGGfSAHQ1+qhkA8cLg=\", false, function () {\n  return [useLocation];\n});\n\n_c = SearchResult;\nexport default SearchResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"names":["React","useState","useLocation","client","SearchResult","searchResults","setSearchResults","error","setError","location","query","URLSearchParams","search","get","gql","then","result","console","log","contents","props","pagenum","pageDetails","getPrevPage","getNextPage"],"sources":["/Users/cajoshuapark/flask/client/src/components/searchResult.tsx"],"sourcesContent":["import React, { useState} from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport {client} from './components/index'\n\n\nfunction SearchResult () {\n    const [searchResults, setSearchResults] = useState([]);\n    const [error, setError] = useState(false);\n    const location = useLocation();\n    const query = new URLSearchParams(location.search).get(\"book\");\n // useQuery will send query to backend through uri link and get the data\n//   const {  loading, error, data }  = useQuery(gql `\n//   query test {\n//     allPages {\n//       nodes {\n//         bookId\n//         pagenum\n//         content\n//         nodeId\n//       }\n//     }\n//   }\n// `);\n//   if (data) console.log(data);\n//   if (loading) console.log('Loading...');\n//   if (error) console.log(`Error! ${error.message}`);\n\nclient.query({\n    query: gql`\n      query test {\n        allPages {\n          nodes {\n            bookId\n            pagenum\n            content\n          }\n        }\n      }\n    `\n  }).then(result => console.log(result));\n\n  // body in useEffect will run after page is rendered. \n\n\n  // // console.log(query);\n  // useEffect(() => {\n  //   // invalid url will trigger an 404 error\n  //   const { search } = window.location;\n  //   const query = new URLSearchParams(search).get('book');\n  //   fetch(\"/getpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(query)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   )\n  // }, []);\n\n  // function getNextPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage+1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage + 1);\n  // };\n  // function getPrevPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage-1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage - 1);\n  // }\n\n\n    \n    console.log(query);\n    return (\n        <div className=\"page\">\n            <h2 className =\"contents\">{query.contents}</h2>\n            <h2 className =\"pagenum-inpage\">{props.pagenum}</h2>\n            <h2 className = \"pagenum\">page: {pageDetails?.pagenum}</h2>\n            <button className = \"circleBackButton\" onClick={getPrevPage}>\n              back page\n            </button>\n            <button className = \"circleForwardButton\" onClick={getNextPage}>\n              next page\n            </button>\n        </div>\n    )\n}\n\nexport default SearchResult;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAAQC,MAAR,QAAqB,oBAArB;;;AAGA,SAASC,YAAT,GAAyB;EAAA;;EAAA;;EACrB,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,KAAD,CAAlC;EACA,MAAMQ,QAAQ,GAAGP,WAAW,EAA5B;EACA,MAAMQ,KAAK,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,EAAqCC,GAArC,CAAyC,MAAzC,CAAd,CAJqB,CAKxB;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAV,MAAM,CAACO,KAAP,CAAa;IACTA,KAAK,EAAEI,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAXa,CAAb,EAYKC,IAZL,CAYUC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAZpB,EAtByB,CAoCvB;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIEC,OAAO,CAACC,GAAR,CAAYR,KAAZ;EACA,oBACI;IAAK,SAAS,EAAC,MAAf;IAAA,wBACI;MAAI,SAAS,EAAE,UAAf;MAAA,UAA2BA,KAAK,CAACS;IAAjC;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAI,SAAS,EAAE,gBAAf;MAAA,UAAiCC,KAAK,CAACC;IAAvC;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAI,SAAS,EAAG,SAAhB;MAAA,qCAAiCC,WAAjC,iDAAiC,aAAaD,OAA9C;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII;MAAQ,SAAS,EAAG,kBAApB;MAAuC,OAAO,EAAEE,WAAhD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJJ,eAOI;MAAQ,SAAS,EAAG,qBAApB;MAA0C,OAAO,EAAEC,WAAnD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAPJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAaH;;GAtGQpB,Y;UAGYF,W;;;KAHZE,Y;AAwGT,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}