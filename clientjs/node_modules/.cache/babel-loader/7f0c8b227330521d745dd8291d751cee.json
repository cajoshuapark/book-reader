{"ast":null,"code":"var _jsxFileName = \"/Users/cajoshuapark/flask/client/src/components/searchResult.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from \"react-router-dom\"; // import {client} from '../index'\n\nimport { gql, useQuery } from '@apollo/client';\nimport { TEST2 } from '../gql/query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchResult() {\n  _s();\n\n  const [pageDetails, setPageDetails] = useState({\n    bookId: 0,\n    pagenum: 0,\n    content: \"\"\n  });\n  const location = useLocation();\n  const fetchedTitle = new URLSearchParams(location.search).get(\"read\");\n  const [title, setTitle] = useState(fetchedTitle);\n  const [fetchedBookId, setBookId] = useState({\n    id: 0\n  });\n  const [query, setQuery] = useState(gql``);\n  if (title) console.log(title); // useEffect(() => {\n  //     if(title){\n  //         setQuery(gql`\n  //         query getBookId {\n  //             allBooks(condition:{\n  //             title: \"${title}\"\n  //             }){\n  //             nodes{\n  //                 id\n  //             }\n  //             }\n  //         }\n  //         `);\n  //         console.log(query);\n  //     }\n  // }, [title]);\n\n  const FETCH_FIRST_PAGE = gql`\n        query getBookId {\n            allBooks(condition:{\n            title: \"Harry Potter\"\n            }){\n            nodes{\n                id\n            }\n            }\n        }\n    `; //  useQuery will send query to backend through uri link and get the data\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TEST2, {\n    variables: {\n      id: 1\n    }\n  }); // useEffect(() => {\n  //     if(data){\n  //         setBookId(data.allBooks.nodes[0].id);\n  //         console.log(data.allBooks.nodes[0].id)\n  //     }\n  // }, [data]);\n  // if (loading) console.log('Loading...');\n  // if (error) console.log(`Error! ${error.message}`);\n  // body in useEffect will run after page is rendered. \n\n  useEffect(() => {\n    if (data) {\n      setPageDetails(data.pageById);\n      console.log(data.pageById);\n    }\n  }, [data]);\n  if (loading) console.log('Loading...');\n  if (error) console.log(`Error! ${error.message}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"contents\",\n      children: pageDetails.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"pagenum-inpage\",\n      children: pageDetails.pagenum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SearchResult, \"rrcjURcg9L/NzVmgKChoThJZJ8o=\", false, function () {\n  return [useLocation, useQuery];\n});\n\n_c = SearchResult;\nexport default SearchResult; // body in useEffect will run after page is rendered. \n// useEffect(() => {\n//   // invalid url will trigger an 404 error\n//   const { search } = window.location;\n//   const query = new URLSearchParams(search).get('book');\n//   fetch(\"/getpage\", {\n//     method:\"POST\",\n//     headers: {\"Content-Type\": \"application/json\" },\n//     body: JSON.stringify(query)\n//   }).then(res => res.json()\n//   ).then(\n//     pageDetails => {\n//       setData(pageDetails)\n//       // console.log(pageDetails)\n//     }\n//   )\n// }, []);\n// function getNextPage() {\n//   fetch(\"/nextpage\", {\n//     method:\"POST\",\n//     headers: {\"Content-Type\": \"application/json\" },\n//     body: JSON.stringify(currPage+1)\n//   }).then(res => res.json()\n//   ).then(\n//     pageDetails => {\n//       setData(pageDetails)\n//       // console.log(pageDetails)\n//     }\n//   );\n//   setCurrPage(currPage + 1);\n// };\n// function getPrevPage() {\n//   fetch(\"/nextpage\", {\n//     method:\"POST\",\n//     headers: {\"Content-Type\": \"application/json\" },\n//     body: JSON.stringify(currPage-1)\n//   }).then(res => res.json()\n//   ).then(\n//     pageDetails => {\n//       setData(pageDetails)\n//       // console.log(pageDetails)\n//     }\n//   );\n//   setCurrPage(currPage - 1);\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","gql","useQuery","TEST2","SearchResult","pageDetails","setPageDetails","bookId","pagenum","content","location","fetchedTitle","URLSearchParams","search","get","title","setTitle","fetchedBookId","setBookId","id","query","setQuery","console","log","FETCH_FIRST_PAGE","loading","error","data","variables","pageById","message"],"sources":["/Users/cajoshuapark/flask/client/src/components/searchResult.tsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { useLocation } from \"react-router-dom\";\n// import {client} from '../index'\nimport { gql, useQuery } from '@apollo/client';\nimport { fetchBookId, TEST, TEST2 } from '../gql/query';\n\n\nfunction SearchResult () {\n    const [pageDetails, setPageDetails] = useState({ bookId: 0,pagenum:0,content:\"\"});\n    const location = useLocation();\n    const fetchedTitle = new URLSearchParams(location.search).get(\"read\");\n    const [title, setTitle] = useState(fetchedTitle);\n    const [fetchedBookId, setBookId] = useState({id: 0});\n\n    const [query, setQuery] = useState(gql``);\n    if(title) console.log(title);\n    // useEffect(() => {\n    //     if(title){\n    //         setQuery(gql`\n    //         query getBookId {\n    //             allBooks(condition:{\n    //             title: \"${title}\"\n    //             }){\n    //             nodes{\n    //                 id\n    //             }\n    //             }\n    //         }\n    //         `);\n    //         console.log(query);\n    //     }\n\n    // }, [title]);\n\n\n    const FETCH_FIRST_PAGE = gql`\n        query getBookId {\n            allBooks(condition:{\n            title: \"Harry Potter\"\n            }){\n            nodes{\n                id\n            }\n            }\n        }\n    `;\n\n//  useQuery will send query to backend through uri link and get the data\n    const {  loading, error, data }  = useQuery(\n        TEST2, {variables: {id:1}}\n    );\n\n    // useEffect(() => {\n    //     if(data){\n    //         setBookId(data.allBooks.nodes[0].id);\n    //         console.log(data.allBooks.nodes[0].id)\n    //     }\n    // }, [data]);\n    // if (loading) console.log('Loading...');\n    // if (error) console.log(`Error! ${error.message}`);\n\n\n    // body in useEffect will run after page is rendered. \n    useEffect(() => {\n        if(data){\n            setPageDetails(data.pageById);\n            console.log(data.pageById)\n        }\n    }, [data]);\n    if (loading) console.log('Loading...');\n    if (error) console.log(`Error! ${error.message}`);\n\n    \n    return (\n        <div className=\"page\">\n            <h1 className = \"title\">{title}</h1>\n            <h2 className =\"contents\">{pageDetails.content}</h2>\n            <h2 className =\"pagenum-inpage\">{pageDetails.pagenum}</h2>\n            {/* <button className = \"circleBackButton\" onClick={getPrevPage}>\n              back page\n            </button>\n            <button className = \"circleForwardButton\" onClick={getNextPage}>\n              next page\n            </button> */}\n        </div>\n    )\n}\n\nexport default SearchResult;\n\n\n\n  // body in useEffect will run after page is rendered. \n  // useEffect(() => {\n  //   // invalid url will trigger an 404 error\n  //   const { search } = window.location;\n  //   const query = new URLSearchParams(search).get('book');\n  //   fetch(\"/getpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(query)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   )\n  // }, []);\n\n  // function getNextPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage+1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage + 1);\n  // };\n  // function getPrevPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage-1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage - 1);\n  // }\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,kBAA5B,C,CACA;;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAA4BC,KAA5B,QAAyC,cAAzC;;;AAGA,SAASC,YAAT,GAAyB;EAAA;;EACrB,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC;IAAES,MAAM,EAAE,CAAV;IAAYC,OAAO,EAAC,CAApB;IAAsBC,OAAO,EAAC;EAA9B,CAAD,CAA9C;EACA,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;EACA,MAAMW,YAAY,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,EAAqCC,GAArC,CAAyC,MAAzC,CAArB;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAACa,YAAD,CAAlC;EACA,MAAM,CAACM,aAAD,EAAgBC,SAAhB,IAA6BpB,QAAQ,CAAC;IAACqB,EAAE,EAAE;EAAL,CAAD,CAA3C;EAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAACG,GAAI,EAAL,CAAlC;EACA,IAAGc,KAAH,EAAUO,OAAO,CAACC,GAAR,CAAYR,KAAZ,EARW,CASrB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;EAGA,MAAMS,gBAAgB,GAAGvB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVI,CA5BqB,CAwCzB;;EACI,MAAM;IAAGwB,OAAH;IAAYC,KAAZ;IAAmBC;EAAnB,IAA6BzB,QAAQ,CACvCC,KADuC,EAChC;IAACyB,SAAS,EAAE;MAACT,EAAE,EAAC;IAAJ;EAAZ,CADgC,CAA3C,CAzCqB,CA6CrB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;;EACApB,SAAS,CAAC,MAAM;IACZ,IAAG4B,IAAH,EAAQ;MACJrB,cAAc,CAACqB,IAAI,CAACE,QAAN,CAAd;MACAP,OAAO,CAACC,GAAR,CAAYI,IAAI,CAACE,QAAjB;IACH;EACJ,CALQ,EAKN,CAACF,IAAD,CALM,CAAT;EAMA,IAAIF,OAAJ,EAAaH,OAAO,CAACC,GAAR,CAAY,YAAZ;EACb,IAAIG,KAAJ,EAAWJ,OAAO,CAACC,GAAR,CAAa,UAASG,KAAK,CAACI,OAAQ,EAApC;EAGX,oBACI;IAAK,SAAS,EAAC,MAAf;IAAA,wBACI;MAAI,SAAS,EAAG,OAAhB;MAAA,UAAyBf;IAAzB;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAI,SAAS,EAAE,UAAf;MAAA,UAA2BV,WAAW,CAACI;IAAvC;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAI,SAAS,EAAE,gBAAf;MAAA,UAAiCJ,WAAW,CAACG;IAA7C;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAaH;;GA/EQJ,Y;UAEYJ,W,EAuCkBE,Q;;;KAzC9BE,Y;AAiFT,eAAeA,YAAf,C,CAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}