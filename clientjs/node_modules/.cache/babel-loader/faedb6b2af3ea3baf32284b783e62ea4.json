{"ast":null,"code":"var _jsxFileName = \"/Users/cajoshuapark/flask/client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SearchResult from './components/searchResult';\nimport Intro from './components/intro';\nimport Navbar from './components/navbar';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { gql } from '@apollo/client';\nimport { useHistory } from \"react-router-dom\";\nimport Search from './components/searchBook';\nimport { client } from './index';\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // const [pageDetails, setData] = useState({title: '', pagenum: '', content: ''});\n  const location = useLocation();\n  const query = new URLSearchParams(location.search).get(\"book\");\n  const [title, setTitle] = useState(query === null || query === void 0 ? void 0 : query.replace(/\\s/g, '-'));\n  console.log(query);\n  console.log(title);\n  let history = useHistory();\n\n  function handleClick(title) {\n    history.push(`/page/${title}`);\n  } // useQuery will send query to backend through uri link and get the data\n  //   const {  loading, error, data }  = useQuery(gql `\n  //   query test {\n  //     allPages {\n  //       nodes {\n  //         bookId\n  //         pagenum\n  //         content\n  //         nodeId\n  //       }\n  //     }\n  //   }\n  // `);\n  //   if (data) console.log(data);\n  //   if (loading) console.log('Loading...');\n  //   if (error) console.log(`Error! ${error.message}`);\n\n\n  client.query({\n    query: gql`\n      query test {\n        allPages {\n          nodes {\n            bookId\n            pagenum\n            content\n          }\n        }\n      }\n    `\n  }).then(result => console.log(result)); // body in useEffect will run after page is rendered. \n\n  useEffect(() => {\n    if (title) {\n      // setData(data.pageById)\n      //regex to remove space\n      handleClick(title);\n    }\n  }); // // console.log(query);\n  // useEffect(() => {\n  //   // invalid url will trigger an 404 error\n  //   const { search } = window.location;\n  //   const query = new URLSearchParams(search).get('book');\n  //   fetch(\"/getpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(query)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   )\n  // }, []);\n  // function getNextPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage+1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage + 1);\n  // };\n  // function getPrevPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage-1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage - 1);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/home\",\n          children: [/*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Intro, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/page\",\n          children: /*#__PURE__*/_jsxDEV(SearchResult, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"fkCgr2Lritz74ZlKLwo0vGWuLxY=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = App;\nexport default App; // \n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchResult","Intro","Navbar","BrowserRouter","Router","Route","Switch","gql","useHistory","Search","client","useLocation","App","location","query","URLSearchParams","search","get","title","setTitle","replace","console","log","history","handleClick","push","then","result"],"sources":["/Users/cajoshuapark/flask/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\nimport Page from './components/page';\nimport SearchResult from './components/searchResult';\nimport Intro from './components/intro';\nimport Navbar from './components/navbar';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport { gql, useQuery } from '@apollo/client';\nimport { FETCH_BOOK_ID_FROM_TITLE, FETCH_FIRST_PAGE,TEST, TEST2 } from './gql/query';\nimport { useHistory } from \"react-router-dom\";\nimport Search from './components/searchBook'\nimport {client} from './index'\nimport { useLocation } from \"react-router-dom\";\n\nconst App = () => {\n  // const [pageDetails, setData] = useState({title: '', pagenum: '', content: ''});\n\n  const location = useLocation();\n  const query = new URLSearchParams(location.search).get(\"book\");\n\n  const [title, setTitle] = useState(query?.replace(/\\s/g, '-'));\n  console.log(query);\n  console.log(title);\n\n  let history = useHistory();\n  function handleClick(title: String) {\n    history.push(`/page/${title}`);\n  }\n  // useQuery will send query to backend through uri link and get the data\n//   const {  loading, error, data }  = useQuery(gql `\n//   query test {\n//     allPages {\n//       nodes {\n//         bookId\n//         pagenum\n//         content\n//         nodeId\n//       }\n//     }\n//   }\n// `);\n//   if (data) console.log(data);\n//   if (loading) console.log('Loading...');\n//   if (error) console.log(`Error! ${error.message}`);\n\n  client.query({\n    query: gql`\n      query test {\n        allPages {\n          nodes {\n            bookId\n            pagenum\n            content\n          }\n        }\n      }\n    `\n  }).then(result => console.log(result));\n\n  // body in useEffect will run after page is rendered. \n  useEffect(() => {\n    if(title){\n      // setData(data.pageById)\n      //regex to remove space\n      handleClick(title);\n    }\n  }, )\n\n  // // console.log(query);\n  // useEffect(() => {\n  //   // invalid url will trigger an 404 error\n  //   const { search } = window.location;\n  //   const query = new URLSearchParams(search).get('book');\n  //   fetch(\"/getpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(query)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   )\n  // }, []);\n\n  // function getNextPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage+1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage + 1);\n  // };\n  // function getPrevPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage-1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage - 1);\n  // }\n\n  return (\n    <div>\n      <Navbar/>\n        {/* <Page \n          contents={pageDetails?.content}\n          pagenum = {pageDetails?.pagenum}\n        />\n        <h2 className = \"pagenum\">page: {pageDetails?.pagenum}</h2>\n        <button className = \"circleBackButton\" onClick={getPrevPage}>\n          back page\n        </button>\n        <button className = \"circleForwardButton\" onClick={getNextPage}>\n          next page\n        </button> */}\n      <Router>\n        <Switch>\n          <Route path=\"/home\">\n            <Search />\n            <Intro />\n          </Route>\n          <Route path={\"/page\"}>\n            <SearchResult/>\n            {/* <Search /> */}\n            {/* <Page/> */}\n\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\nexport default App;\n\n// "],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AAEA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAAQC,aAAa,IAAIC,MAAzB,EAAiCC,KAAjC,EAAwCC,MAAxC,QAAqD,kBAArD;AACA,OAAO,WAAP;AACA,SAASC,GAAT,QAA8B,gBAA9B;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAAQC,MAAR,QAAqB,SAArB;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB;EAEA,MAAMC,QAAQ,GAAGF,WAAW,EAA5B;EACA,MAAMG,KAAK,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,EAAqCC,GAArC,CAAyC,MAAzC,CAAd;EAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAACgB,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEM,OAAP,CAAe,KAAf,EAAsB,GAAtB,CAAD,CAAlC;EACAC,OAAO,CAACC,GAAR,CAAYR,KAAZ;EACAO,OAAO,CAACC,GAAR,CAAYJ,KAAZ;EAEA,IAAIK,OAAO,GAAGf,UAAU,EAAxB;;EACA,SAASgB,WAAT,CAAqBN,KAArB,EAAoC;IAClCK,OAAO,CAACE,IAAR,CAAc,SAAQP,KAAM,EAA5B;EACD,CAbe,CAchB;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEER,MAAM,CAACI,KAAP,CAAa;IACXA,KAAK,EAAEP,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAXe,CAAb,EAYGmB,IAZH,CAYQC,MAAM,IAAIN,OAAO,CAACC,GAAR,CAAYK,MAAZ,CAZlB,EA/BgB,CA6ChB;;EACA5B,SAAS,CAAC,MAAM;IACd,IAAGmB,KAAH,EAAS;MACP;MACA;MACAM,WAAW,CAACN,KAAD,CAAX;IACD;EACF,CANQ,CAAT,CA9CgB,CAsDhB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAA,wBACE,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAaE,QAAC,MAAD;MAAA,uBACE,QAAC,MAAD;QAAA,wBACE,QAAC,KAAD;UAAO,IAAI,EAAC,OAAZ;UAAA,wBACE,QAAC,MAAD;YAAA;YAAA;YAAA;UAAA,QADF,eAEE,QAAC,KAAD;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAKE,QAAC,KAAD;UAAO,IAAI,EAAE,OAAb;UAAA,uBACE,QAAC,YAAD;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QALF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAbF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA8BD,CAnID;;GAAMN,G;UAGaD,W,EAOHH,U;;;KAVVI,G;AAoIN,eAAeA,GAAf,C,CAEA"},"metadata":{},"sourceType":"module"}