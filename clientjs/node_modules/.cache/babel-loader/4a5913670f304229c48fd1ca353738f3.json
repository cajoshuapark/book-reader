{"ast":null,"code":"var _jsxFileName = \"/Users/cajoshuapark/flask/client/src/components/searchResult.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from \"react-router-dom\"; // import {client} from '../index'\n\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchResult() {\n  _s();\n\n  const [pageDetails, setPageDetails] = useState({\n    bookId: 0,\n    pagenum: 0,\n    content: \"\"\n  });\n  const location = useLocation();\n  const fetchedTitle = new URLSearchParams(location.search).get(\"read\");\n  const [title, setTitle] = useState(fetchedTitle);\n  const [fetchedBookId, setBookId] = useState({\n    id: 0\n  });\n  if (title) console.log(title);\n\n  async function getFirstPageId() {\n    const FETCH_FIRST_PAGE = await gql`\n            query getBookId {\n                allBooks(condition:{\n                title: ${title}\n                }){\n                nodes{\n                    id\n                }\n                }\n            }\n            `;\n  } //  useQuery will send query to backend through uri link and get the data\n\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(FETCH_FIRST_PAGE);\n  useEffect(() => {\n    if (data) {\n      setPageDetails(data.allBooks.nodes[0].id);\n      console.log(data.allBooks.nodes[0].id);\n    }\n  }, [data]);\n  if (loading) console.log('Loading...');\n  if (error) console.log(`Error! ${error.message}`); // body in useEffect will run after page is rendered. \n  // useEffect(() => {\n  //     if(data){\n  //         setPageDetails(data.pageById);\n  //         console.log(data.pageById)\n  //     }\n  // }, [data]);\n  // if (loading) console.log('Loading...');\n  // if (error) console.log(`Error! ${error.message}`);\n  // client.query({\n  //     query: gql`\n  //     query test2($id: Int!) {\n  //         pageById(id: $id){\n  //           bookId\n  //           pagenum\n  //           content\n  //         }\n  //       }\n  //     `\n  //   }).then(result => console.log(result));\n  // var res = axios({\n  //     method: 'post',\n  //     url: 'http://localhost:5000/graphql',\n  //     withCredentials: false,\n  //     data: {\n  //         query: `\n  //             query test2($id: Int!) {\n  //                 pageById(id: $id){\n  //                 bookId\n  //                 pagenum\n  //                 content\n  //                 }\n  //             }\n  //         `\n  //     }\n  // });\n  // console.log(res);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"contents\",\n      children: pageDetails.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"pagenum-inpage\",\n      children: pageDetails.pagenum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SearchResult, \"tEwPeOKfmVVKOwcYfO6PoWhRLAk=\", false, function () {\n  return [useLocation, useQuery];\n});\n\n_c = SearchResult;\nexport default SearchResult; // body in useEffect will run after page is rendered. \n// useEffect(() => {\n//   // invalid url will trigger an 404 error\n//   const { search } = window.location;\n//   const query = new URLSearchParams(search).get('book');\n//   fetch(\"/getpage\", {\n//     method:\"POST\",\n//     headers: {\"Content-Type\": \"application/json\" },\n//     body: JSON.stringify(query)\n//   }).then(res => res.json()\n//   ).then(\n//     pageDetails => {\n//       setData(pageDetails)\n//       // console.log(pageDetails)\n//     }\n//   )\n// }, []);\n// function getNextPage() {\n//   fetch(\"/nextpage\", {\n//     method:\"POST\",\n//     headers: {\"Content-Type\": \"application/json\" },\n//     body: JSON.stringify(currPage+1)\n//   }).then(res => res.json()\n//   ).then(\n//     pageDetails => {\n//       setData(pageDetails)\n//       // console.log(pageDetails)\n//     }\n//   );\n//   setCurrPage(currPage + 1);\n// };\n// function getPrevPage() {\n//   fetch(\"/nextpage\", {\n//     method:\"POST\",\n//     headers: {\"Content-Type\": \"application/json\" },\n//     body: JSON.stringify(currPage-1)\n//   }).then(res => res.json()\n//   ).then(\n//     pageDetails => {\n//       setData(pageDetails)\n//       // console.log(pageDetails)\n//     }\n//   );\n//   setCurrPage(currPage - 1);\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","gql","useQuery","SearchResult","pageDetails","setPageDetails","bookId","pagenum","content","location","fetchedTitle","URLSearchParams","search","get","title","setTitle","fetchedBookId","setBookId","id","console","log","getFirstPageId","FETCH_FIRST_PAGE","loading","error","data","allBooks","nodes","message"],"sources":["/Users/cajoshuapark/flask/client/src/components/searchResult.tsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { useLocation } from \"react-router-dom\";\n// import {client} from '../index'\nimport { gql, useQuery } from '@apollo/client';\nimport { fetchFirstPage,TEST, TEST2 } from '../gql/query';\nimport axios from 'axios';\n\n\nfunction SearchResult () {\n    const [pageDetails, setPageDetails] = useState({ bookId: 0,pagenum:0,content:\"\"});\n    const location = useLocation();\n    const fetchedTitle = new URLSearchParams(location.search).get(\"read\");\n    const [title, setTitle] = useState(fetchedTitle);\n    const [fetchedBookId, setBookId] = useState({id: 0});\n    if(title) console.log(title);\n    async function getFirstPageId(){\n        const FETCH_FIRST_PAGE = await gql`\n            query getBookId {\n                allBooks(condition:{\n                title: ${title}\n                }){\n                nodes{\n                    id\n                }\n                }\n            }\n            `;\n    }\n\n\n//  useQuery will send query to backend through uri link and get the data\n    const {  loading, error, data }  = useQuery(\n        FETCH_FIRST_PAGE\n    );\n    useEffect(() => {\n        if(data){\n            setPageDetails(data.allBooks.nodes[0].id);\n            console.log(data.allBooks.nodes[0].id)\n        }\n    }, [data]);\n    if (loading) console.log('Loading...');\n    if (error) console.log(`Error! ${error.message}`);\n\n\n    // body in useEffect will run after page is rendered. \n    // useEffect(() => {\n    //     if(data){\n    //         setPageDetails(data.pageById);\n    //         console.log(data.pageById)\n    //     }\n    // }, [data]);\n    // if (loading) console.log('Loading...');\n    // if (error) console.log(`Error! ${error.message}`);\n\n// client.query({\n//     query: gql`\n//     query test2($id: Int!) {\n//         pageById(id: $id){\n//           bookId\n//           pagenum\n//           content\n//         }\n//       }\n//     `\n//   }).then(result => console.log(result));\n\n\n\n    // var res = axios({\n    //     method: 'post',\n    //     url: 'http://localhost:5000/graphql',\n    //     withCredentials: false,\n    //     data: {\n    //         query: `\n    //             query test2($id: Int!) {\n    //                 pageById(id: $id){\n    //                 bookId\n    //                 pagenum\n    //                 content\n    //                 }\n    //             }\n    //         `\n    //     }\n    // });\n    // console.log(res);\n    \n    return (\n        <div className=\"page\">\n            <h1 className = \"title\">{title}</h1>\n            <h2 className =\"contents\">{pageDetails.content}</h2>\n            <h2 className =\"pagenum-inpage\">{pageDetails.pagenum}</h2>\n            {/* <button className = \"circleBackButton\" onClick={getPrevPage}>\n              back page\n            </button>\n            <button className = \"circleForwardButton\" onClick={getNextPage}>\n              next page\n            </button> */}\n        </div>\n    )\n}\n\nexport default SearchResult;\n\n\n\n\n\n  // body in useEffect will run after page is rendered. \n  // useEffect(() => {\n  //   // invalid url will trigger an 404 error\n  //   const { search } = window.location;\n  //   const query = new URLSearchParams(search).get('book');\n  //   fetch(\"/getpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(query)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   )\n  // }, []);\n\n  // function getNextPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage+1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage + 1);\n  // };\n  // function getPrevPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage-1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage - 1);\n  // }\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,kBAA5B,C,CACA;;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;;;AAKA,SAASC,YAAT,GAAyB;EAAA;;EACrB,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC;IAAEQ,MAAM,EAAE,CAAV;IAAYC,OAAO,EAAC,CAApB;IAAsBC,OAAO,EAAC;EAA9B,CAAD,CAA9C;EACA,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;EACA,MAAMU,YAAY,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,EAAqCC,GAArC,CAAyC,MAAzC,CAArB;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAACY,YAAD,CAAlC;EACA,MAAM,CAACM,aAAD,EAAgBC,SAAhB,IAA6BnB,QAAQ,CAAC;IAACoB,EAAE,EAAE;EAAL,CAAD,CAA3C;EACA,IAAGJ,KAAH,EAAUK,OAAO,CAACC,GAAR,CAAYN,KAAZ;;EACV,eAAeO,cAAf,GAA+B;IAC3B,MAAMC,gBAAgB,GAAG,MAAMrB,GAAI;AAC3C;AACA;AACA,yBAAyBa,KAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,aAVQ;EAWH,CAnBoB,CAsBzB;;;EACI,MAAM;IAAGS,OAAH;IAAYC,KAAZ;IAAmBC;EAAnB,IAA6BvB,QAAQ,CACvCoB,gBADuC,CAA3C;EAGAvB,SAAS,CAAC,MAAM;IACZ,IAAG0B,IAAH,EAAQ;MACJpB,cAAc,CAACoB,IAAI,CAACC,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAuBT,EAAxB,CAAd;MACAC,OAAO,CAACC,GAAR,CAAYK,IAAI,CAACC,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAuBT,EAAnC;IACH;EACJ,CALQ,EAKN,CAACO,IAAD,CALM,CAAT;EAMA,IAAIF,OAAJ,EAAaJ,OAAO,CAACC,GAAR,CAAY,YAAZ;EACb,IAAII,KAAJ,EAAWL,OAAO,CAACC,GAAR,CAAa,UAASI,KAAK,CAACI,OAAQ,EAApC,EAjCU,CAoCrB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAII;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACI;IAAK,SAAS,EAAC,MAAf;IAAA,wBACI;MAAI,SAAS,EAAG,OAAhB;MAAA,UAAyBd;IAAzB;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAI,SAAS,EAAE,UAAf;MAAA,UAA2BV,WAAW,CAACI;IAAvC;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAI,SAAS,EAAE,gBAAf;MAAA,UAAiCJ,WAAW,CAACG;IAA7C;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAaH;;GA3FQJ,Y;UAEYH,W,EAqBkBE,Q;;;KAvB9BC,Y;AA6FT,eAAeA,YAAf,C,CAME;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}