{"ast":null,"code":"var _jsxFileName = \"/Users/cajoshuapark/flask/client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Navbar from './navbar';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport { useQuery } from '@apollo/client';\nimport { fetchFirstPage } from './gql/query';\nimport { HttpLink } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst link = new HttpLink({\n  uri: \"http://localhost:4000/graphql\" // Additional options\n\n});\n\nconst App = () => {\n  _s();\n\n  // const [pageDetails, setData] = useState({title: '', pagenum: '', content: ''});\n  const [pageDetails, setData] = useState({\n    bookId: '',\n    pagenum: '',\n    content: ''\n  });\n  const [currPage, setCurrPage] = useState(1); // const { search } = window.location;\n  // const query = new URLSearchParams(search).get('book');\n  // console.log(query);\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(fetchFirstPage); // body in useEffect will run after page is rendered. \n\n  useEffect(() => {\n    if (data) {\n      setData(data);\n      console.log(data);\n    }\n  }, [data]);\n  console.log(data);\n  console.log(pageDetails); // // console.log(query);\n  // useEffect(() => {\n  //   // invalid url will trigger an 404 error\n  //   const { search } = window.location;\n  //   const query = new URLSearchParams(search).get('book');\n  //   fetch(\"/getpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(query)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   )\n  // }, []);\n  // function getNextPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage+1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage + 1);\n  // };\n  // function getPrevPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage-1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage - 1);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        title: pageDetails === null || pageDetails === void 0 ? void 0 : pageDetails.bookId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n};\n\n_s(App, \"0mSbCU187eOufTjyoEbF5lMpIGk=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\nexport default App; // \n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","BrowserRouter","Router","useQuery","fetchFirstPage","HttpLink","link","uri","App","pageDetails","setData","bookId","pagenum","content","currPage","setCurrPage","loading","error","data","console","log"],"sources":["/Users/cajoshuapark/flask/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\nimport Page from './page';\nimport Navbar from './navbar';\nimport {BrowserRouter as Router, Switch} from 'react-router-dom';\nimport './App.css';\nimport { useQuery } from '@apollo/client';\nimport { fetchBookIdFromTitle, fetchFirstPage,test } from './gql/query';\nimport { HttpLink } from '@apollo/client';\n\nconst link = new HttpLink({\n  uri: \"http://localhost:4000/graphql\"\n  // Additional options\n});\nconst App = () => {\n  // const [pageDetails, setData] = useState({title: '', pagenum: '', content: ''});\n  const [pageDetails, setData] = useState({bookId: '', pagenum: '', content: ''});\n  const [currPage, setCurrPage] = useState(1);\n  // const { search } = window.location;\n  // const query = new URLSearchParams(search).get('book');\n  // console.log(query);\n\n  const { loading, error, data }  = useQuery(fetchFirstPage);\n  // body in useEffect will run after page is rendered. \n  useEffect(() => {\n    if(data){\n      setData(data)\n      console.log(data)\n    }\n  }, [data])\n  console.log(data);\n  console.log(pageDetails);\n\n  // // console.log(query);\n  // useEffect(() => {\n  //   // invalid url will trigger an 404 error\n  //   const { search } = window.location;\n  //   const query = new URLSearchParams(search).get('book');\n  //   fetch(\"/getpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(query)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   )\n  // }, []);\n\n  // function getNextPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage+1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage + 1);\n  // };\n  // function getPrevPage() {\n  //   fetch(\"/nextpage\", {\n  //     method:\"POST\",\n  //     headers: {\"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(currPage-1)\n  //   }).then(res => res.json()\n  //   ).then(\n  //     pageDetails => {\n  //       setData(pageDetails)\n  //       // console.log(pageDetails)\n  //     }\n  //   );\n  //   setCurrPage(currPage - 1);\n  // }\n\n  return <Router>\n    {(\n    <div>\n      <Navbar title = {pageDetails?.bookId}/>\n      <h1 className='title'>{data}</h1>\n      {/* <Page \n        contents={pageDetails?.content}\n        pagenum = {pageDetails?.pagenum}\n      />\n      <h2 className = \"pagenum\">page: {pageDetails?.pagenum}</h2>\n      <button className = \"circleBackButton\" onClick={getPrevPage}>\n        back page\n      </button>\n      <button className = \"circleForwardButton\" onClick={getNextPage}>\n        next page\n      </button> */}\n\n      {/* <Switch>\n        <Route path=\"/home\">\n          <Search />\n          <h1 className='introText'>SEARCH FOR A BOOK</h1>\n        </Route>\n        <Route path={\"/page\"}>\n          <Page \n            contents={pageDetails?.content}\n            pagenum = {pageDetails?.pagenum}\n          />\n          <h2 className = \"pagenum\">page: {pageDetails?.pagenum}</h2>\n          <button className = \"circleBackButton\" onClick={getPrevPage}>\n            back page\n          </button>\n          <button className = \"circleForwardButton\" onClick={getNextPage}>\n            next page\n          </button>\n        </Route>\n       </Switch> */}\n    </div>\n  )} </Router>\n}\nexport default App;\n\n// "],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,aAAa,IAAIC,MAAzB,QAA8C,kBAA9C;AACA,OAAO,WAAP;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAA+BC,cAA/B,QAA0D,aAA1D;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,MAAMC,IAAI,GAAG,IAAID,QAAJ,CAAa;EACxBE,GAAG,EAAE,+BADmB,CAExB;;AAFwB,CAAb,CAAb;;AAIA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB;EACA,MAAM,CAACC,WAAD,EAAcC,OAAd,IAAyBZ,QAAQ,CAAC;IAACa,MAAM,EAAE,EAAT;IAAaC,OAAO,EAAE,EAAtB;IAA0BC,OAAO,EAAE;EAAnC,CAAD,CAAvC;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,CAAD,CAAxC,CAHgB,CAIhB;EACA;EACA;;EAEA,MAAM;IAAEkB,OAAF;IAAWC,KAAX;IAAkBC;EAAlB,IAA4Bf,QAAQ,CAACC,cAAD,CAA1C,CARgB,CAShB;;EACAL,SAAS,CAAC,MAAM;IACd,IAAGmB,IAAH,EAAQ;MACNR,OAAO,CAACQ,IAAD,CAAP;MACAC,OAAO,CAACC,GAAR,CAAYF,IAAZ;IACD;EACF,CALQ,EAKN,CAACA,IAAD,CALM,CAAT;EAMAC,OAAO,CAACC,GAAR,CAAYF,IAAZ;EACAC,OAAO,CAACC,GAAR,CAAYX,WAAZ,EAjBgB,CAmBhB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAO,QAAC,MAAD;IAAA,wBAEL;MAAA,wBACE,QAAC,MAAD;QAAQ,KAAK,EAAIA,WAAJ,aAAIA,WAAJ,uBAAIA,WAAW,CAAEE;MAA9B;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAI,SAAS,EAAC,OAAd;QAAA,UAAuBO;MAAvB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFK;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AAsCD,CAxGD;;GAAMV,G;UAQ8BL,Q;;;KAR9BK,G;AAyGN,eAAeA,GAAf,C,CAEA"},"metadata":{},"sourceType":"module"}